#!/usr/bin/env ruby
# frozen_string_literal: true

require "gli"
require "subrepo/commands"
require "subrepo/version"

module Subrepo
  # Command line interface for the subrepo commands
  class CLI
    include GLI::App
    include Subrepo::Commands

    def setup
      program_desc "Subrepos -- improved"

      version VERSION

      desc "Initialize a subrepo"
      arg :dir
      command :init do |cmd|
        cmd.flag [:remote, :r], arg_name: "url"
        cmd.flag [:branch, :b], arg_name: "branch"
        cmd.action do |_, options, args|
          subdir = args.shift or raise "Provide dir"
          remote = options[:remote] or raise "Provide remote"
          branch = options[:branch] or raise "Provide branch"
          command_init(subdir, remote: remote, branch: branch)
        end
      end

      desc "Fetch latest commits from a subrepo's remote"
      arg :dir
      command :fetch do |cmd|
        cmd.flag [:remote, :r], arg_name: "url"
        cmd.action do |_, options, args|
          subdir = args.shift or raise "Provide dir"
          command_fetch(subdir, remote: options[:remote])
        end
      end

      desc "Squash-merge latest fetched commits into a subrepo"
      arg :dir
      command :merge do |cmd|
        cmd.action do |_, _options, args|
          subdir = args.shift or raise "Provide dir"
          command_merge(subdir)
        end
      end

      desc "Pull upstream changes into a subrepo"
      arg :dir
      command :pull do |cmd|
        cmd.flag [:remote, :r], arg_name: "url"
        cmd.action do |_, options, args|
          subdir = args.shift or raise "Provide dir"
          command_pull(subdir, remote: options[:remote])
        end
      end

      desc "Push latest changes to a subrepo to its remote"
      arg :dir
      command :push do |cmd|
        cmd.flag [:remote, :r], arg_name: "url"
        cmd.flag [:branch, :b], arg_name: "branch"
        cmd.action do |_, options, args|
          subdir = args.shift or raise "Provide dir"
          command_push(subdir, remote: options[:remote], branch: options[:branch])
        end
      end

      desc "Status"
      command :status do |cmd|
        cmd.switch :all, default_value: false
        cmd.switch :all_recursive, defaul_value: false
        cmd.action do |_, options, _args|
          command_status(recursive: options[:all_recursive])
        end
      end
    end
  end
end

app = Subrepo::CLI.new
app.setup
result = app.run(ARGV)
exit result
