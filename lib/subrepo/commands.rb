# frozen_string_literal: true

require "open3"
require "rugged"
require "tempfile"

require "subrepo/version"
require "subrepo/config"
require "subrepo/runner"
require "subrepo/main_repository"

module Subrepo
  # Entry point for each of the subrepo commands
  module Commands
    module_function

    def command_status(recursive: false)
      main = MainRepository.new
      subrepos = main.subrepos(recursive: recursive)

      puts "#{subrepos.count} subrepos:"
      subrepos.each do |it|
        puts "Git subrepo '#{it}':"
      end
    end

    def command_config(subdir, option:, value:, force: false)
      subdir or raise "Command 'config' requires arg 'subdir'."
      option or raise "Command 'config' requires arg 'option'."

      config = Config.new(subdir)
      if value
        if option == "branch" && !force
          raise "This option is autogenerated, use '--force' to override."
        end

        config.send "#{option}=", value
        puts "Subrepo '#{subdir}' option '#{option}' set to '#{value}'."
      else
        value = config.send option
        puts "Subrepo '#{subdir}' option '#{option}' has value '#{value}'."
      end
    end

    def command_fetch(subdir, remote: nil)
      subdir or raise "Command 'fetch' requires arg 'subdir'."

      config = Config.new(subdir)
      remote ||= config.remote
      branch = config.branch
      last_merged_commit = config.commit

      last_fetched_commit = perform_fetch(subdir, remote, branch, last_merged_commit)
      if last_fetched_commit == last_merged_commit
        puts "No change"
      else
        puts "Fetched '#{subdir}' from '#{remote}' (#{branch})."
      end
    end

    def command_merge(subdir, squash:, message: nil, edit: false)
      subdir or raise "Command 'merge' requires arg 'subdir'."
      current_branch = `git rev-parse --abbrev-ref HEAD`.chomp
      config = Config.new(subdir)
      branch = config.branch
      last_merged_commit = config.commit

      repo = Rugged::Repository.new(".")

      last_local_commit = repo.head.target.oid
      config_name = config.file_name
      last_config_commit = `git log -n 1 --pretty=format:%H -- "#{config_name}"`

      refs_subrepo_fetch = "refs/subrepo/#{subdir}/fetch"
      last_fetched_commit = `git rev-parse #{refs_subrepo_fetch}`.chomp

      if last_fetched_commit == last_merged_commit
        puts "Subrepo '#{subdir}' is up to date."
        return
      end

      # Check validity of last_merged_commit
      walker = Rugged::Walker.new(repo)
      walker.push last_fetched_commit
      found = walker.to_a.any? { |commit| commit.oid == last_merged_commit }
      unless found
        raise "Last merged commit #{last_merged_commit} not found in fetched commits"
      end

      run_command "git rebase" \
        " --onto #{last_config_commit} #{last_merged_commit} #{last_fetched_commit}" \
        " --rebase-merges" \
        " -X subtree=#{subdir}"

      rebased_head = `git rev-parse HEAD`.chomp
      run_command "git checkout -q #{current_branch}"
      run_command "git merge #{rebased_head} --no-ff --no-edit -q"

      if squash
        run_command "git reset --soft #{last_local_commit}"
        run_command "git commit -q -m WIP"
        config.parent = last_config_commit
      else
        config.parent = rebased_head
      end

      config.commit = last_fetched_commit
      run_command "git add \"#{config_name}\""

      message ||=
        "Subrepo-merge #{subdir}/#{branch} into #{current_branch}\n\n" \
        "merged:   \\\"#{last_fetched_commit}\\\""

      command = "git commit -q -m \"#{message}\" --amend"
      if edit
        run_command "#{command} --edit"
      else
        run_command command
      end
    end

    def perform_fetch(subdir, remote, branch, _last_merged_commit)
      remote_commit = `git ls-remote --no-tags \"#{remote}\" \"#{branch}\"`
      return false if remote_commit.empty?

      run_command "git fetch -q --no-tags \"#{remote}\" \"#{branch}\""
      new_commit = `git rev-parse FETCH_HEAD`.chomp
      refs_subrepo_fetch = "refs/subrepo/#{subdir}/fetch"
      run_command "git update-ref #{refs_subrepo_fetch} #{new_commit}"
      new_commit
    end

    def run_command(command)
      _out, _err, status = Open3.capture3 command
      status == 0 or raise "Command failed"
    end
  end
end
